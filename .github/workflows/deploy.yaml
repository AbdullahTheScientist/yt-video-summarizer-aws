name: Deploy Application Docker Image to EC2 instance

on:
  push:
    branches: [main]

jobs:
  Continuous-Integration:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "IMAGE=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

  Continuous-Deployment:
    needs: Continuous-Integration
    runs-on: self-hosted
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Stop and remove old containers (if any)
        run: |
          CONTAINER_ID=$(docker ps -q --filter "ancestor=${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}")
          if [ ! -z "$CONTAINER_ID" ]; then
            echo "Stopping and removing existing container..."
            docker stop $CONTAINER_ID
            docker rm $CONTAINER_ID
          fi

      - name: Free port 8080 if still occupied
        run: |
          PID=$(sudo lsof -t -i:8080)
          if [ ! -z "$PID" ]; then
            echo "Port 8080 is in use. Killing process $PID..."
            sudo kill -9 $PID
          fi

      - name: Remove old Docker images (optional)
        run: |
          docker image prune -f

      - name: Run new Docker container
        run: |
          docker run -d \
          -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
          -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
          -e AWS_REGION="${{ secrets.AWS_REGION }}" \
          -e GOOGLE_API_KEY="${{ secrets.GOOGLE_API_KEY }}" \
          -p 8080:8080 \
          "${{ steps.login-ecr.outputs.registry }}"/"${{ secrets.ECR_REPOSITORY_NAME }}":latest
